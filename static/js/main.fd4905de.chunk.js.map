{"version":3,"sources":["components/SliderView.tsx","components/HtmlContents.tsx","components/Preview.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["settings","arrows","dots","infinite","speed","slidesToShow","slidesToScroll","responsive","breakpoint","SliderView","list","map","_m","_i","key","src","replace","alt","Wrapper","styled","div","InnerHTML","HtmlContents","html","P_TAGS_REG","RegExp","IMG_TAGS_REG","htmlTag","match","tags","imgObject","m","i","ImgReg","length","dangerouslySetInnerHTML","__html","TagToInnerHTML","DISPLAY","Container","DeviceGroup","Tag","PreviewContainer","WrapperNon","Preview","useState","size","setSize","reSize","type","useEffect","onClick","className","style","width","height","Modules","toolbar","align","color","background","clipboard","matchVisual","ContentsLayout","WriteLayout","Br","App","value","setValue","theme","onChange","c","d","s","e","modules","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAqBMA,G,cAAW,CACbC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,WAAY,CACR,CACIC,WAAY,IACZR,SAAU,CACNK,aAAc,EACdC,eAAgB,EAChBH,UAAU,EACVD,MAAM,IAGd,CACIM,WAAY,IACZR,SAAU,CACNK,aAAc,EACdC,eAAgB,EAChBH,UAAU,EACVD,MAAM,IAGd,CACIM,WAAY,IACZR,SAAU,CACNK,aAAc,EACdC,eAAgB,EAChBH,UAAU,EACVD,MAAM,OAMPO,EAlDqB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnC,OACI,kBAAC,IAAWV,EACPU,EAAKC,KAAI,SAACC,EAASC,GAAV,OACN,yBAAKC,IAAKD,GACN,yBAAKE,IAAKH,EAAGI,QAAQ,KAAM,IAAKC,IAAI,e,8dCNxD,IAoCMC,EAAUC,IAAOC,IAAV,KAQPC,EAAYF,IAAOC,IAAV,KAiBAE,EA7DuB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/BC,EAAa,IAAIC,OACnB,oGAEEC,EAAe,IAAID,OAAO,0CAC1BE,EAAUJ,EAAKK,MAAMJ,GA4B3B,OAAO,kBAACN,EAAD,KA1BgB,SAACW,GACpB,IAAMC,EAAY,GAUlB,OATAD,EAAKlB,KAAI,SAACoB,EAAQC,GACd,IAAMC,EAASF,EAAEH,MAAMF,GAMvB,OALIO,GACIA,EAAOC,OAAS,IAChBJ,EAAUE,GAAKC,GAGhBF,KAEJF,EAAKlB,KAAI,SAACoB,EAAQC,GAAT,OACZF,EAAUE,GACN,kBAACX,EAAD,CAAWP,IAAKkB,GACZ,kBAAC,EAAD,CAAYtB,KAAMoB,EAAUE,MAGhC,kBAACX,EAAD,CACIP,IAAKkB,EACLG,wBAAyB,CACrBC,OAAQL,QAMXM,CAAeV,K,slDC9BpC,IAAMW,EAAU,CACZ,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,OAiDJC,EAAYpB,IAAOC,IAAV,KAQToB,EAAcrB,IAAOC,IAAV,KAQXqB,EAAMtB,IAAOC,IAAV,KAmBHsB,EAAmBvB,IAAOC,IAAV,KAKhBuB,EAAaxB,IAAOC,IAAV,KAgCDwB,EAtHkB,SAAC,GAAc,IAAZrB,EAAW,EAAXA,KAAW,EACnBsB,mBAAS,CAAC,IAAK,MADI,mBACpCC,EADoC,KAC9BC,EAD8B,KAErCC,EAAS,SAACC,GACZF,EAAQT,EAAQW,KAKpB,OAFAC,qBAAU,kBAAMH,EAAQT,EAAQ,MAAK,IAGjC,kBAACC,EAAD,KACI,kBAACC,EAAD,KACI,kBAACC,EAAD,CACIU,QAAS,kBAAMH,EAAO,IACtBI,UAAWN,IAASR,EAAQ,GAAK,WAAa,IAFlD,WAKA,kBAACG,EAAD,CACIU,QAAS,kBAAMH,EAAO,IACtBI,UAAWN,IAASR,EAAQ,GAAK,WAAa,IAFlD,WAKA,kBAACG,EAAD,CACIU,QAAS,kBAAMH,EAAO,IACtBI,UAAWN,IAASR,EAAQ,GAAK,WAAa,IAFlD,aAMJ,kBAACI,EAAD,CACIU,UAAU,wBACVC,MAAO,CAAEC,MAAOR,EAAK,GAAIS,OAAQT,EAAK,KACtC,kBAAC,aAAD,CACIM,UAAU,YACVC,MAAO,CAAEC,MAAOR,EAAK,GAAIS,OAAQT,EAAK,KACrCvB,EACG,kBAAC,EAAD,CAAcA,KAAMA,IAEpB,kBAACoB,EAAD,KACI,yBAAKS,UAAU,WAAf,gB,iyBChD5B,IAuBMI,EAAU,CACZC,QAAS,CACL,CAAC,CAAEX,KAAM,KACT,CAAC,OAAQ,SAAU,YAAa,UAChC,CACI,CAAEY,MAAO,EAAC,EAAO,SAAU,UAC3B,CAAEhD,KAAM,WACR,CAAEA,KAAM,WAEZ,CAAC,CAAEiD,MAAO,IAAM,CAAEC,WAAY,KAC9B,CAAC,QAAS,OAAQ,SAClB,CAAC,eAELC,UAAW,CAEPC,aAAa,IAIfvB,EAAYpB,IAAOC,IAAV,KAUT2C,EAAiB5C,IAAOC,IAAV,KAKd4C,EAAc7C,IAAOC,IAAV,KAiBX6C,EAAK9C,IAAOC,IAAV,KAIO8C,EA9EO,WAAO,IAAD,EACErB,mBAAiB,IADnB,mBACjBsB,EADiB,KACVC,EADU,KAExB,OACI,kBAAC,EAAD,KACI,0DACA,kBAACL,EAAD,KACI,kBAACC,EAAD,KACI,kBAAC,IAAD,CACIK,MAAO,OACPC,SAAU,SAACC,EAAGC,EAAGC,EAAGC,GAChBN,EAAe,gBAANG,EAAsB,GAAKA,IAExCJ,MAAOA,EACPQ,QAASnB,KAGjB,kBAACS,EAAD,MACA,kBAAC,EAAD,CAAS1C,KAAM4C,QCXXS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnD,MACvB,2DCZNoD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fd4905de.chunk.js","sourcesContent":["import React from 'react';\r\nimport Slider from 'react-slick';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\n\r\ninterface Props {\r\n    list: any[];\r\n}\r\n\r\nconst SliderView: React.FC<Props> = ({ list }) => {\r\n    return (\r\n        <Slider {...settings}>\r\n            {list.map((_m: any, _i: any) => (\r\n                <div key={_i}>\r\n                    <img src={_m.replace('\">', '')} alt=\"img\" />\r\n                </div>\r\n            ))}\r\n        </Slider>\r\n    );\r\n};\r\n\r\nconst settings = {\r\n    arrows: false,\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    responsive: [\r\n        {\r\n            breakpoint: 768,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true,\r\n            },\r\n        },\r\n        {\r\n            breakpoint: 412,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true,\r\n            },\r\n        },\r\n        {\r\n            breakpoint: 360,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true,\r\n            },\r\n        },\r\n    ],\r\n};\r\n\r\nexport default SliderView;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SliderView from './SliderView';\r\n\r\ninterface Props {\r\n    html: string;\r\n}\r\n\r\nconst HtmlContents: React.FC<Props> = ({ html }) => {\r\n    const P_TAGS_REG = new RegExp(\r\n        /<(p|(pre)|(ol)|(ul)|(iframe)|(opengraph))(.*?)<\\/(p|(pre)|(ol)|(ul)|(iframe)|(opengraph))>/gs,\r\n    );\r\n    const IMG_TAGS_REG = new RegExp(/data:image[\\\\\"']?([^>\\\\\"']+)[\\\\\"']*\">/g);\r\n    const htmlTag = html.match(P_TAGS_REG);\r\n\r\n    const TagToInnerHTML = (tags: any) => {\r\n        const imgObject = {};\r\n        tags.map((m: any, i: number) => {\r\n            const ImgReg = m.match(IMG_TAGS_REG);\r\n            if (ImgReg) {\r\n                if (ImgReg.length > 1) {\r\n                    imgObject[i] = ImgReg;\r\n                }\r\n            }\r\n            return m;\r\n        });\r\n        return tags.map((m: any, i: number) =>\r\n            imgObject[i] ? (\r\n                <InnerHTML key={i}>\r\n                    <SliderView list={imgObject[i]} />\r\n                </InnerHTML>\r\n            ) : (\r\n                <InnerHTML\r\n                    key={i}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: m,\r\n                    }}></InnerHTML>\r\n            ),\r\n        );\r\n    };\r\n\r\n    return <Wrapper>{TagToInnerHTML(htmlTag)}</Wrapper>;\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    padding: 0 1rem;\r\n\r\n    img {\r\n        max-width: 100%;\r\n    }\r\n`;\r\n\r\nconst InnerHTML = styled.div`\r\n    .slick-slide img {\r\n        max-height: 50vh;\r\n        margin: 0 auto;\r\n    }\r\n    .slick-dots {\r\n        bottom: -40px;\r\n    }\r\n    .slick-dots,\r\n    .slick-dots > li {\r\n        padding: 0;\r\n        &::before {\r\n            color: transparent;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default HtmlContents;\r\n","/* eslint-disable no-useless-escape */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport HtmlContents from './HtmlContents';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n    html: string;\r\n}\r\n\r\nconst DISPLAY = [\r\n    [360, 640],\r\n    [412, 725],\r\n    [768, 1024],\r\n];\r\n\r\nconst Preview: React.FC<Props> = ({ html }) => {\r\n    const [size, setSize] = useState([360, 640]);\r\n    const reSize = (type: number) => {\r\n        setSize(DISPLAY[type]);\r\n    };\r\n\r\n    useEffect(() => setSize(DISPLAY[0]), []);\r\n\r\n    return (\r\n        <Container>\r\n            <DeviceGroup>\r\n                <Tag\r\n                    onClick={() => reSize(0)}\r\n                    className={size === DISPLAY[0] ? 'selected' : ''}>\r\n                    360*640\r\n                </Tag>\r\n                <Tag\r\n                    onClick={() => reSize(1)}\r\n                    className={size === DISPLAY[1] ? 'selected' : ''}>\r\n                    412*725\r\n                </Tag>\r\n                <Tag\r\n                    onClick={() => reSize(2)}\r\n                    className={size === DISPLAY[2] ? 'selected' : ''}>\r\n                    768*1024\r\n                </Tag>\r\n            </DeviceGroup>\r\n            <PreviewContainer\r\n                className=\"ql-container ql-snow \"\r\n                style={{ width: size[0], height: size[1] }}>\r\n                <Scrollbars\r\n                    className=\"ql-editor\"\r\n                    style={{ width: size[0], height: size[1] }}>\r\n                    {html ? (\r\n                        <HtmlContents html={html} />\r\n                    ) : (\r\n                        <WrapperNon>\r\n                            <div className=\"preview\">PREVIEW</div>\r\n                        </WrapperNon>\r\n                    )}\r\n                </Scrollbars>\r\n            </PreviewContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-top: 25px;\r\n`;\r\n\r\nconst DeviceGroup = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst Tag = styled.div`\r\n    font-size: 0.8rem;\r\n    padding: 5px;\r\n    border: 1px solid black;\r\n    color: black;\r\n    cursor: pointer;\r\n    & + div {\r\n        margin-left: 5px;\r\n    }\r\n    &:hover {\r\n        background: black;\r\n        color: white;\r\n    }\r\n    &.selected {\r\n        background: black;\r\n        color: white;\r\n    }\r\n`;\r\n\r\nconst PreviewContainer = styled.div`\r\n    border: 0.2rem solid black;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst WrapperNon = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    height: 100%;\r\n    background: darkgray;\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n    border-radius: 3px;\r\n    padding-top: 10%;\r\n\r\n    div {\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        padding: 0 5%;\r\n        font-weight: normal;\r\n    }\r\n    .preview {\r\n        font-size: 3rem;\r\n        font-weight: bold;\r\n        margin-bottom: 1rem;\r\n        text-align: center;\r\n    }\r\n    .title {\r\n        margin-top: 1rem;\r\n        margin-bottom: 0.25rem;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport default Preview;\r\n","import React, { useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport Preview from 'components/Preview';\nimport styled from 'styled-components';\n\nconst App: React.FC = () => {\n    const [value, setValue] = useState<string>('');\n    return (\n        <Container>\n            <h1>React Quill Editor Preview</h1>\n            <ContentsLayout>\n                <WriteLayout>\n                    <ReactQuill\n                        theme={'snow'}\n                        onChange={(c, d, s, e) => {\n                            setValue(c === '<p><br></p>' ? '' : c);\n                        }}\n                        value={value}\n                        modules={Modules}\n                    />\n                </WriteLayout>\n                <Br />\n                <Preview html={value} />\n            </ContentsLayout>\n        </Container>\n    );\n};\n\nconst Modules = {\n    toolbar: [\n        [{ size: [] }],\n        ['bold', 'italic', 'underline', 'strike'],\n        [\n            { align: [false, 'center', 'right'] },\n            { list: 'ordered' },\n            { list: 'bullet' },\n        ],\n        [{ color: [] }, { background: [] }],\n        ['image', 'link', 'video'],\n        ['code-block'],\n    ],\n    clipboard: {\n        // toggle to add extra line breaks when pasting HTML:\n        matchVisual: false,\n    },\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n    height: auto;\n    margin: 5rem 10rem;\n`;\n\nconst ContentsLayout = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst WriteLayout = styled.div`\n    max-width: 800px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n\n    .quill {\n        display: inline-block;\n        width: 800px;\n        height: 700px;\n    }\n    .ql-toolbar {\n        background: #eaecec;\n    }\n`;\n\nconst Br = styled.div`\n    width: 50px;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}